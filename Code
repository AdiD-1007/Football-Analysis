import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.backends.backend_pdf import PdfPages

# Load the dataset
df = pd.read_csv("players_21.csv")
print("âœ… Dataset Loaded Successfully!")

# Basic cleaning
df.drop(columns=['player_url', 'real_face', 'loaned_from', 'nation_position', 'nation_jersey_number'], errors='ignore', inplace=True)
df['height_cm'] = df['height_cm'].fillna(df['height_cm'].mean())
df['weight_kg'] = df['weight_kg'].fillna(df['weight_kg'].mean())
df.drop_duplicates(inplace=True)

# Start saving plots to a single PDF
with PdfPages("fifa21_report.pdf") as pdf:

    # Top 10 clubs by combined overall rating of best 11 players
    club_overall = (
        df.sort_values(['club_name', 'overall'], ascending=[True, False])
          .groupby('club_name')
          .head(11)
          .groupby('club_name')['overall']
          .sum()
          .sort_values(ascending=False)
          .head(10)
    )

    plt.figure(figsize=(12, 6))
    sns.barplot(x=club_overall.values, y=club_overall.index, hue=club_overall.index,
                palette='mako', dodge=False, legend=False)
    plt.title("Top 10 Clubs by Combined Overall Rating of Best 11 Players")
    plt.xlabel("Total Overall Rating")
    plt.ylabel("Club")
    pdf.savefig()
    plt.close()

    # Top 10 players by overall
    top10 = df[['short_name', 'overall', 'club_name']].sort_values(by='overall', ascending=False).head(10)
    plt.figure(figsize=(10, 5))
    sns.barplot(x='overall', y='short_name', data=top10, color='blue')
    plt.title("Top 10 Players by Overall Rating")
    plt.xlabel("Overall Rating")
    plt.ylabel("Player")
    pdf.savefig()
    plt.close()

    # Age distribution
    plt.figure(figsize=(10, 5))
    sns.histplot(df['age'], bins=30, kde=False, color='skyblue')
    plt.title("Age Distribution of Players")
    plt.xlabel("Age")
    plt.ylabel("Number of Players")
    pdf.savefig()
    plt.close()

    # Wage distribution of top 100 players
    top100 = df.sort_values(by='overall', ascending=False).head(100)
    plt.figure(figsize=(12, 6))
    sns.histplot(top100['wage_eur'], bins=30, kde=False, color='orange')
    plt.title("Wage Distribution of Top 100 Players")
    plt.xlabel("Wage in Euros")
    plt.ylabel("Number of Players")
    pdf.savefig()
    plt.close()

    # Most common positions
    top_positions = df['player_positions'].value_counts().head(10)
    plt.figure(figsize=(10, 6))
    sns.barplot(x=top_positions.values.astype(int), y=top_positions.index, color='purple')
    plt.title("Most Common Player Positions")
    plt.xlabel("Number of Players")
    plt.ylabel("Position")
    pdf.savefig()
    plt.close()

    # Top 10 countries by player count
    top_nations = df['nationality'].value_counts().head(10)
    plt.figure(figsize=(10, 6))
    sns.barplot(x=top_nations.values.astype(int), y=top_nations.index, color='green')
    plt.title("Top 10 Countries by Number of Players")
    plt.xlabel("Number of Players")
    plt.ylabel("Country")
    pdf.savefig()
    plt.close()

    # Top 10 clubs by number of future superstars (Potential â‰¥ 75 & Gap â‰¥ 5)
    df['potential_gap'] = df['potential'] - df['overall']
    future_stars = df[(df['potential_gap'] >= 5) & (df['potential'] >= 75)]
    club_future_stars = future_stars['club_name'].value_counts().head(10)

    plt.figure(figsize=(12, 6))
    sns.barplot(x=club_future_stars.values.astype(int), y=club_future_stars.index, hue=club_future_stars.index,
                palette='crest', dodge=False, legend=False)
    plt.title("Top 10 Clubs by Number of Future Superstars (Potential â‰¥ 75 & Gap â‰¥ 5)")
    plt.xlabel("Number of Future Stars")
    plt.ylabel("Club")
    pdf.savefig()
    plt.close()

    # Best leagues currently (by avg overall of top 20 players per league)
    league_overall = (
        df.sort_values(['league_name', 'overall'], ascending=[True, False])
          .groupby('league_name')
          .head(20)
          .groupby('league_name')['overall']
          .mean()
          .sort_values(ascending=False)
          .head(10)
    )

    plt.figure(figsize=(12, 6))
    sns.barplot(x=league_overall.values, y=league_overall.index, hue=league_overall.index,
                palette='rocket', dodge=False, legend=False)
    plt.title("Top 10 Leagues by Average Overall Rating of Top 20 Players")
    plt.xlabel("Average Overall Rating")
    plt.ylabel("League")
    pdf.savefig()
    plt.close()

    # Best leagues in future (by avg potential of top 20 players per league)
    league_potential = (
        df.sort_values(['league_name', 'potential'], ascending=[True, False])
          .groupby('league_name')
          .head(20)
          .groupby('league_name')['potential']
          .mean()
          .sort_values(ascending=False)
          .head(10)
    )

    plt.figure(figsize=(12, 6))
    sns.barplot(x=league_potential.values, y=league_potential.index, hue=league_potential.index,
                palette='flare', dodge=False, legend=False)
    plt.title("Top 10 Leagues by Average Potential Rating of Top 20 Players")
    plt.xlabel("Average Potential Rating")
    plt.ylabel("League")
    pdf.savefig()
    plt.close()

print("ðŸ“„ All plots saved to fifa21_report.pdf!")
